{"version":3,"sources":["src/data/journalEntriesReducer.ts","src/data/spotFavoritesReducer.ts","src/data/store.ts","src/utils/Surfline.ts","src/utils/formatting.ts","src/components/ForecastSearchResult.tsx","src/screens/ForecastScreen.tsx","src/components/StarRater.tsx","src/screens/JournalEntryDetailsScreen.tsx","src/components/JournalEntryListItem.tsx","src/components/JournalEntryList.tsx","src/screens/JournalEntryListScreen.tsx","src/screens/JournalEntriesStack.tsx","src/screens/MainTabs.tsx","src/screens/NewJournalEntryScreen.tsx","src/screens/RootStack.tsx","src/App.tsx"],"names":["journalEntriesAdapter","createEntityAdapter","selectId","journalEntry","id","sortComparer","a","b","aDate","Date","createdAt","bDate","journalEntriesSlice","createSlice","name","initialState","getInitialState","reducers","journalEntryAdded","addOne","deleteJournalEntry","removeOne","journalEntriesSelectors","getSelectors","state","journalEntries","spotFavoritesAdapter","spot","spotFavoritesSlice","spotFavoriteAdded","removeSpotFavorite","spotFavoritesSelectors","spotFavorites","journalEntriesPersistConfig","key","version","storage","AsyncStorage","spotFavoritesPersistConfig","store","configureStore","reducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","Surfline","path","fetch","headers","Accept","response","ok","error","Error","statusText","statusCode","status","json","params","Object","keys","filter","undefined","map","encodeURIComponent","join","input","this","baseFetch","result","hits","length","hit","_id","_source","permalink","href","swells","spotId","camera","cameras","forecast","report","cam","cameraStillUrl","stillUrl","cameraRewindClipUrl","rewindClip","rating","conditions","value","wind","speed","direction","weather","temperature","wave","minHeight","waveHeight","min","maxHeight","max","occasionalHeight","occasional","plusHeight","plus","human","humanRelation","tide","type","current","primarySwell","findPrimarySwell","body","formatRating","toLowerCase","formatWave","occString","plusString","formatTide","formatWind","formatPrimarySwell","swell","height","period","formatForecast","connect","selectAll","searchText","dispatch","useDispatch","useState","loading","setLoading","setResult","useFocusEffect","React","useCallback","isActive","async","searchSpots","fetchReport","ActivityIndicator","size","animating","Text","message","View","camURL","isAlreadyAFavorite","find","sf","ScrollView","style","styles","container","saveButton","Ionicons","Button","backgroundColor","onPress","actions","Image","camImage","source","uri","striptags","formatFullReport","StyleSheet","create","flex","marginBottom","width","setSearchText","resultSearchText","setResultSearchText","SafeAreaView","searchBar","keyboardType","onChangeText","text","placeholder","onSubmitEditing","Keyboard","dismiss","TouchableOpacity","searchButton","color","padding","flexDirection","flexGrow","borderBottomColor","borderBottomWidth","Star","on","star","props","v","onChange","justifyContent","STAR_SIZE","marginEnd","date","fontSize","marginTop","deleteButton","selectById","route","navigation","setOptions","title","toLocaleString","StarRater","pop","Pressable","pressed","item","Separator","hairlineWidth","FlatList","data","renderItem","JournalEntryListItem","onPressJournalEntry","keyExtractor","ItemSeparatorComponent","useLayoutEffect","headerRight","navigate","JournalEntryList","push","MainStack","createStackNavigator","Navigator","Screen","component","JournalEntryListScreen","options","JournalEntryDetailsScreen","Tab","createBottomTabNavigator","screenOptions","tabBarIcon","focused","JournalEntriesStack","tabBarLabel","ForecastScreen","setBody","starRating","setStarRating","setSpotId","headerLeft","TextInput","selectedValue","onValueChange","itemValue","Item","label","nullthrows","nanoid","toString","disabled","RootStack","mode","MainTabs","headerShown","NewJournalEntryScreen","registerRootComponent","NavigationContainer","StatusBar"],"mappings":"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","file":"static/js/app.3e5d645d.chunk.js","sourcesContent":["import { createEntityAdapter, createSlice } from '@reduxjs/toolkit';\n\nimport { Forecast, Spot } from '../utils/Surfline';\nimport { RootState } from './store';\n\nexport interface JournalEntry {\n  id: string;\n  createdAt: string;\n  body: string;\n  spot: Spot;\n  forecast: Forecast;\n  rating: number;\n}\n\nexport const journalEntriesAdapter = createEntityAdapter<JournalEntry>({\n  selectId: (journalEntry) => journalEntry.id,\n  sortComparer: (a, b) => {\n    const aDate = new Date(a.createdAt);\n    const bDate = new Date(b.createdAt);\n    return aDate < bDate ? -1 : bDate < aDate ? 1 : 0;\n  },\n});\n\nexport const journalEntriesSlice = createSlice({\n  name: 'journalEntries',\n  initialState: journalEntriesAdapter.getInitialState(),\n  reducers: {\n    journalEntryAdded: journalEntriesAdapter.addOne,\n    deleteJournalEntry: journalEntriesAdapter.removeOne,\n  },\n});\n\nexport const journalEntriesSelectors = journalEntriesAdapter.getSelectors<RootState>(\n  (state) => state.journalEntries\n);\n","import { createEntityAdapter, createSlice } from '@reduxjs/toolkit';\n\nimport { Spot } from '../utils/Surfline';\nimport { RootState } from './store';\n\nexport const spotFavoritesAdapter = createEntityAdapter<Spot>({\n  selectId: (spot) => spot.id,\n  sortComparer: (a, b) => {\n    return a.name < b.name ? -1 : b.name < a.name ? 1 : 0;\n  },\n});\n\nexport const spotFavoritesSlice = createSlice({\n  name: 'spotFavorites',\n  initialState: spotFavoritesAdapter.getInitialState(),\n  reducers: {\n    spotFavoriteAdded: spotFavoritesAdapter.addOne,\n    removeSpotFavorite: spotFavoritesAdapter.removeOne,\n  },\n});\n\nexport const spotFavoritesSelectors = spotFavoritesAdapter.getSelectors<RootState>(\n  (state) => state.spotFavorites\n);\n","import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n  persistStore,\n} from 'redux-persist';\n\nimport { journalEntriesSlice } from './journalEntriesReducer';\nimport { spotFavoritesSlice } from './spotFavoritesReducer';\n\nconst journalEntriesPersistConfig = {\n  key: 'journal_entries',\n  version: 1,\n  storage: AsyncStorage,\n};\n\nconst spotFavoritesPersistConfig = {\n  key: 'spot_favorites',\n  version: 1,\n  storage: AsyncStorage,\n};\n\nexport const store = configureStore({\n  reducer: {\n    journalEntries: persistReducer(journalEntriesPersistConfig, journalEntriesSlice.reducer),\n    spotFavorites: persistReducer(spotFavoritesPersistConfig, spotFavoritesSlice.reducer),\n  },\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n});\n\nexport const persistor = persistStore(store);\n\nexport type RootState = ReturnType<typeof store.getState>;\n","const BASE_URL = 'https://services.surfline.com';\n\nexport interface Spot {\n  id: string;\n  name: string;\n  permalink: string;\n}\n\nexport interface Wave {\n  minHeight: number;\n  maxHeight: number;\n  occasionalHeight?: number;\n  plusHeight: boolean;\n  human: string;\n}\n\nexport interface Wind {\n  speed: number;\n  direction: number;\n}\n\nexport interface Tide {\n  type: string;\n}\n\nexport interface Swell {\n  height: number;\n  direction: number;\n  period: number;\n}\n\nexport interface Forecast {\n  rating?: string;\n  wind: Wind;\n  weather: {\n    temperature: number;\n  };\n  wave: Wave;\n  tide: Tide;\n  primarySwell: Swell;\n}\n\nexport interface Report {\n  cam: {\n    cameraStillUrl?: string;\n    cameraRewindClipUrl?: string;\n  };\n  forecast: Forecast;\n  report: {\n    body?: string;\n  };\n}\n\nexport default class Surfline {\n  private static async baseFetch<T>(path: string): Promise<T> {\n    const response = await fetch(`${BASE_URL}${path}`, {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n    if (!response.ok) {\n      const error = new Error(response.statusText);\n      (error as any).response = response;\n      (error as any).statusCode = response.status;\n      throw error;\n    }\n\n    return await response.json();\n  }\n\n  private static createParamString(params: { [key: string]: any }): string {\n    return Object.keys(params)\n      .filter((key) => params[key] !== undefined && params[key] !== null)\n      .map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n      .join('&');\n  }\n\n  public static async searchSpots(input: string): Promise<Spot | null> {\n    const result = await this.baseFetch<any[]>(\n      `/search/site?q=${input}&querySize=1&suggestionSize=1`\n    );\n\n    const hits = result[0].hits.hits;\n    if (!hits.length) {\n      return null;\n    }\n\n    const hit = hits[0];\n\n    return {\n      id: hit._id,\n      name: hit._source.name,\n      permalink: hit._source.href,\n    };\n  }\n\n  private static findPrimarySwell(swells: any[]): Swell {\n    return swells[0];\n  }\n\n  public static async fetchReport(spotId: string): Promise<Report> {\n    const result = await this.baseFetch<any>(`/kbyg/spots/reports?spotId=${spotId}`);\n    const camera = result.spot.cameras[0];\n    const forecast = result.forecast;\n    const report = result.report;\n    return {\n      cam: {\n        cameraStillUrl: camera?.stillUrl,\n        cameraRewindClipUrl: camera?.rewindClip,\n      },\n      forecast: {\n        rating: forecast.conditions.value,\n        wind: {\n          speed: forecast.wind.speed,\n          direction: forecast.wind.direction,\n        },\n        weather: {\n          temperature: forecast.weather.temperature,\n        },\n        wave: {\n          minHeight: forecast.waveHeight.min,\n          maxHeight: forecast.waveHeight.max,\n          occasionalHeight: forecast.waveHeight.occasional,\n          plusHeight: forecast.waveHeight.plus,\n          human: forecast.waveHeight.humanRelation,\n        },\n        tide: {\n          type: forecast.tide.current.type,\n        },\n        primarySwell: Surfline.findPrimarySwell(forecast.swells),\n      },\n      report: {\n        body: report?.body,\n      },\n    };\n  }\n}\n","import striptags from 'striptags';\n\nimport { Forecast, Report, Swell, Wave, Wind } from './Surfline';\n\nfunction formatRating(rating?: string): string | null {\n  return rating ? rating.toLowerCase() : null;\n}\n\nfunction formatWave(wave: Wave): string {\n  const occString = wave.occasionalHeight ? ` occ. ${wave.occasionalHeight}` : '';\n  const plusString = wave.plusHeight ? `+` : '';\n  return `${wave.minHeight}-${wave.maxHeight}ft${occString}${plusString}`;\n}\n\nfunction formatTide(tide: { type: string }): string {\n  return `Tide: ${tide.type.toLowerCase()}`;\n}\n\nfunction formatWind(wind: Wind): string {\n  return `Wind: ${wind.speed}kts, ${wind.direction}°`;\n}\n\nfunction formatPrimarySwell(swell: Swell): string {\n  return `Primary Swell: ${swell.height}ft at ${swell.period}s ${swell.direction}`;\n}\n\nexport function formatForecast(forecast: Forecast): string {\n  const { wave, wind, rating, tide, primarySwell } = forecast;\n  return [\n    formatRating(rating),\n    formatWave(wave),\n    formatTide(tide),\n    formatWind(wind),\n    formatPrimarySwell(primarySwell),\n  ]\n    .filter((a) => a)\n    .join('\\n');\n}\n\nexport function formatReport(report: Report): string {\n  return formatForecast(report.forecast);\n}\n\nexport function formatFullReport(report: Report): string {\n  const { wave, wind, rating, tide, primarySwell } = report.forecast;\n  return [\n    formatRating(rating),\n    formatWave(wave),\n    formatTide(tide),\n    formatWind(wind),\n    formatPrimarySwell(primarySwell),\n    '',\n    report.report.body ? striptags(report.report.body) : '',\n  ]\n    .filter((a) => a !== null)\n    .join('\\n');\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport { useFocusEffect } from '@react-navigation/native';\nimport React, { useState } from 'react';\nimport { Image, Text, View, StyleSheet, ActivityIndicator, ScrollView } from 'react-native';\nimport { connect, useDispatch } from 'react-redux';\n\nimport { spotFavoritesSelectors, spotFavoritesSlice } from '../data/spotFavoritesReducer';\nimport { RootState } from '../data/store';\nimport Surfline, { Report, Spot } from '../utils/Surfline';\nimport { formatFullReport } from '../utils/formatting';\n\nconst ForecastSearchResult = ({\n  searchText,\n  spotFavorites,\n}: {\n  searchText: string;\n  spotFavorites: Spot[];\n}) => {\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(true);\n  const [result, setResult] = useState<{ report: Report; spot: Spot } | Error | null>(null);\n\n  useFocusEffect(\n    React.useCallback(() => {\n      let isActive = true;\n\n      const fetchReport = async () => {\n        setLoading(true);\n        try {\n          const spot = await Surfline.searchSpots(searchText);\n          if (spot) {\n            const report = await Surfline.fetchReport(spot.id);\n            if (isActive) {\n              setResult({ report, spot });\n            }\n          }\n        } catch (e) {\n          if (isActive) {\n            setResult(e);\n          }\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      fetchReport();\n\n      return () => {\n        isActive = false;\n      };\n    }, [searchText])\n  );\n\n  if (loading) {\n    return <ActivityIndicator size=\"large\" animating />;\n  }\n\n  if (result instanceof Error) {\n    return <Text>Error: {result.message}</Text>;\n  }\n\n  if (!result) {\n    return <View />;\n  }\n\n  const camURL = result.report?.cam.cameraStillUrl;\n\n  const isAlreadyAFavorite = spotFavorites.find((sf) => sf.id === result.spot.id);\n\n  const onPressSave = () => {\n    if (isAlreadyAFavorite) {\n      dispatch(spotFavoritesSlice.actions.removeSpotFavorite(result.spot.id));\n    } else {\n      dispatch(spotFavoritesSlice.actions.spotFavoriteAdded(result.spot));\n    }\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.saveButton}>\n        <Ionicons.Button\n          name={isAlreadyAFavorite ? 'star' : 'star-outline'}\n          /* @ts-expect-error */\n          backgroundColor={isAlreadyAFavorite ? 'green' : 'gold'}\n          onPress={onPressSave}>\n          {isAlreadyAFavorite ? 'Unfavorite' : 'Favorite'}\n        </Ionicons.Button>\n      </View>\n\n      {camURL ? (\n        <Image\n          style={styles.camImage}\n          source={{\n            uri: camURL,\n          }}\n        />\n      ) : null}\n      <Text>{result.spot.name}</Text>\n      <Text>{formatFullReport(result.report)}</Text>\n    </ScrollView>\n  );\n};\n\nexport default connect((state: RootState) => {\n  return {\n    spotFavorites: spotFavoritesSelectors.selectAll(state),\n  };\n})(ForecastSearchResult);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  saveButton: {\n    marginBottom: 30,\n  },\n  camImage: {\n    width: 150,\n    height: 150,\n    marginBottom: 30,\n  },\n});\n","import { Ionicons } from '@expo/vector-icons';\nimport React, { useState } from 'react';\nimport { Keyboard, StyleSheet, TouchableOpacity, View } from 'react-native';\nimport { TextInput } from 'react-native-gesture-handler';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nimport ForecastSearchResult from '../components/ForecastSearchResult';\n\nexport default () => {\n  const [searchText, setSearchText] = useState('');\n  const [resultSearchText, setResultSearchText] = useState('');\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.searchBar}>\n        <TextInput\n          value={searchText}\n          keyboardType=\"default\"\n          onChangeText={(text) => setSearchText(text)}\n          placeholder=\"Search for a Spot\"\n          style={styles.input}\n          onSubmitEditing={() => {\n            Keyboard.dismiss();\n            setResultSearchText(searchText);\n          }}\n        />\n        <TouchableOpacity\n          onPress={() => {\n            Keyboard.dismiss();\n            setResultSearchText(searchText);\n          }}\n          style={styles.searchButton}>\n          <Ionicons name=\"search-circle\" color=\"blue\" size={30} />\n        </TouchableOpacity>\n      </View>\n      <ForecastSearchResult searchText={resultSearchText} />\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#fff',\n  },\n  searchBar: {\n    flexDirection: 'row',\n  },\n  searchButton: {\n    flexGrow: 0,\n  },\n  input: {\n    flexGrow: 1,\n    padding: 4,\n    marginBottom: 20,\n    borderBottomColor: '#ddd',\n    borderBottomWidth: 1,\n  },\n});\n","import { Ionicons } from '@expo/vector-icons';\nimport React from 'react';\nimport { StyleSheet, View } from 'react-native';\n\ntype Props = {\n  value: number;\n  onChange: (value: number) => void;\n};\n\nconst Star = ({ on, onPress }: { on: boolean; onPress: () => void }) => {\n  return (\n    <Ionicons.Button\n      name={on ? 'star' : 'star-outline'}\n      // @ts-expect-error\n      backgroundColor=\"white\"\n      style={styles.star}\n      color=\"gold\"\n      onPress={onPress}\n    />\n  );\n};\n\nexport default (props: Props) => {\n  return (\n    <View style={styles.container}>\n      {[1, 2, 3, 4, 5].map((v) => (\n        <Star key={`star-${v}`} on={props.value >= v} onPress={() => props.onChange(v)} />\n      ))}\n    </View>\n  );\n};\n\nconst STAR_SIZE = 30;\nconst STARGIN = 5;\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    width: STAR_SIZE * 5 + STARGIN * 5,\n  },\n  star: {\n    width: STAR_SIZE,\n    height: STAR_SIZE,\n    marginEnd: STARGIN,\n    padding: 0,\n  },\n});\n","import { Ionicons } from '@expo/vector-icons';\nimport { CompositeNavigationProp } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { connect, useDispatch } from 'react-redux';\n\nimport StarRater from '../components/StarRater';\nimport {\n  journalEntriesSelectors,\n  journalEntriesSlice,\n  JournalEntry,\n} from '../data/journalEntriesReducer';\nimport { RootState } from '../data/store';\nimport { formatForecast } from '../utils/formatting';\nimport { HomeStackParamList } from './JournalEntriesStack';\nimport { RootStackParamList } from './RootStack';\n\ntype DetailsScreenNavigationProp = CompositeNavigationProp<\n  StackNavigationProp<HomeStackParamList, 'JournalEntryDetailsScreen'>,\n  CompositeNavigationProp<\n    StackNavigationProp<HomeStackParamList>,\n    StackNavigationProp<RootStackParamList>\n  >\n>;\n\nconst Details = ({\n  navigation,\n  journalEntry,\n}: {\n  navigation: DetailsScreenNavigationProp;\n  journalEntry: JournalEntry | undefined;\n}) => {\n  const dispatch = useDispatch();\n\n  React.useLayoutEffect(() => {\n    navigation.setOptions({\n      title: journalEntry ? journalEntry.spot.name : 'Not Found',\n    });\n  }, [navigation]);\n\n  if (!journalEntry) {\n    return (\n      <View style={styles.container}>\n        <Text>Not Found</Text>\n      </View>\n    );\n  }\n\n  const onPressDelete = async () => {\n    dispatch(journalEntriesSlice.actions.deleteJournalEntry(journalEntry.id));\n    navigation.pop();\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.date}>{new Date(journalEntry.createdAt).toLocaleString()}</Text>\n      <Text style={styles.body}>{journalEntry.body}</Text>\n      <Text style={styles.body}>{formatForecast(journalEntry.forecast)}</Text>\n      <StarRater value={journalEntry.rating} onChange={() => {}} />\n      <View style={styles.deleteButton}>\n        {/* @ts-expect-error */}\n        <Ionicons.Button name=\"trash-bin\" backgroundColor=\"red\" onPress={onPressDelete}>\n          Delete\n        </Ionicons.Button>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#fff',\n  },\n  date: {\n    fontSize: 14,\n    marginTop: 10,\n  },\n  body: {\n    marginTop: 10,\n    fontSize: 16,\n  },\n  deleteButton: {\n    marginTop: 40,\n  },\n});\n\nexport default connect((state: RootState, props: { route: { params: { id: string } } }) => {\n  return {\n    journalEntry: journalEntriesSelectors.selectById(state, props.route.params.id),\n  };\n})(Details);\n","import * as React from 'react';\nimport { Text, StyleSheet, Pressable } from 'react-native';\n\nimport { JournalEntry } from '../data/journalEntriesReducer';\n\ntype Props = {\n  journalEntry: JournalEntry;\n  onPress: (journalEntry: JournalEntry) => void;\n};\n\nexport default (props: Props) => {\n  return (\n    <Pressable\n      onPress={() => props.onPress(props.journalEntry)}\n      style={({ pressed }) => [{ backgroundColor: pressed ? '#eee' : '#fff' }, styles.item]}>\n      <Text style={styles.title}>{props.journalEntry.spot.name}</Text>\n      <Text style={styles.date}>{new Date(props.journalEntry.createdAt).toLocaleString()}</Text>\n    </Pressable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  item: {\n    padding: 20,\n  },\n  title: {\n    fontSize: 16,\n  },\n  date: {\n    marginTop: 8,\n    color: '#666',\n    fontSize: 14,\n  },\n});\n","import * as React from 'react';\nimport { FlatList, StyleSheet, View } from 'react-native';\n\nimport { JournalEntry } from '../data/journalEntriesReducer';\nimport JournalEntryListItem from './JournalEntryListItem';\n\ntype Props = {\n  journalEntries: JournalEntry[];\n  onPressJournalEntry: (journalEntry: JournalEntry) => void;\n};\n\nconst Separator = () => <View style={{ height: StyleSheet.hairlineWidth }} />;\n\nexport default (props: Props) => {\n  const renderItem = ({ item }: { item: JournalEntry }) => (\n    <JournalEntryListItem journalEntry={item} onPress={props.onPressJournalEntry} />\n  );\n\n  return (\n    <FlatList\n      data={props.journalEntries}\n      renderItem={renderItem}\n      keyExtractor={(item) => item.id}\n      ItemSeparatorComponent={Separator}\n    />\n  );\n};\n","import { Ionicons } from '@expo/vector-icons';\nimport { CompositeNavigationProp } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport React, { useLayoutEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport JournalEntryList from '../components/JournalEntryList';\nimport { journalEntriesSelectors, JournalEntry } from '../data/journalEntriesReducer';\nimport { RootState } from '../data/store';\nimport { HomeStackParamList } from './JournalEntriesStack';\nimport { RootStackParamList } from './RootStack';\n\ntype HomeScreenNavigationProp = CompositeNavigationProp<\n  StackNavigationProp<HomeStackParamList, 'JournalEntryListScreen'>,\n  CompositeNavigationProp<\n    StackNavigationProp<HomeStackParamList>,\n    StackNavigationProp<RootStackParamList>\n  >\n>;\n\nconst Home = ({\n  navigation,\n  journalEntries,\n}: {\n  navigation: HomeScreenNavigationProp;\n  journalEntries: JournalEntry[];\n}) => {\n  const onPressJournalEntry = (journalEntry: JournalEntry) => {\n    navigation.push('JournalEntryDetailsScreen', { id: journalEntry.id });\n  };\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: () => (\n        <Ionicons.Button\n          onPress={() => navigation.navigate('NewJournalEntryScreen')}\n          // @ts-expect-error\n          backgroundColor=\"white\"\n          name=\"add\"\n          color=\"blue\"\n          size={30}\n        />\n      ),\n    });\n  }, [navigation]);\n\n  return (\n    <JournalEntryList journalEntries={journalEntries} onPressJournalEntry={onPressJournalEntry} />\n  );\n};\n\nexport default connect((state: RootState) => ({\n  journalEntries: journalEntriesSelectors.selectAll(state),\n}))(Home);\n","import { createStackNavigator } from '@react-navigation/stack';\nimport React from 'react';\n\nimport JournalEntryDetailsScreen from './JournalEntryDetailsScreen';\nimport JournalEntryListScreen from './JournalEntryListScreen';\n\nexport type HomeStackParamList = {\n  JournalEntryListScreen: undefined;\n  JournalEntryDetailsScreen: { id: string };\n};\n\nconst MainStack = createStackNavigator<HomeStackParamList>();\n\nexport default () => (\n  <MainStack.Navigator>\n    <MainStack.Screen\n      name=\"JournalEntryListScreen\"\n      component={JournalEntryListScreen}\n      options={{ title: 'Surf Journal' }}\n    />\n    <MainStack.Screen name=\"JournalEntryDetailsScreen\" component={JournalEntryDetailsScreen} />\n  </MainStack.Navigator>\n);\n","import { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport React from 'react';\n\nimport ForecastScreen from './ForecastScreen';\nimport JournalEntriesStack from './JournalEntriesStack';\n\nexport type MainTabsParamList = {\n  JournalEntriesStack: undefined;\n  ForecastScreen: undefined;\n};\n\nconst Tab = createBottomTabNavigator<MainTabsParamList>();\n\nexport default () => (\n  <Tab.Navigator\n    screenOptions={({ route }) => ({\n      tabBarIcon: ({ focused, color, size }) => {\n        switch (route.name) {\n          case 'JournalEntriesStack':\n            return (\n              <Ionicons name={focused ? 'journal' : 'journal-outline'} size={size} color={color} />\n            );\n          case 'ForecastScreen':\n            return (\n              <Ionicons name={focused ? 'rainy' : 'rainy-outline'} size={size} color={color} />\n            );\n        }\n      },\n    })}>\n    <Tab.Screen\n      name=\"JournalEntriesStack\"\n      component={JournalEntriesStack}\n      options={{ tabBarLabel: 'Journal' }}\n    />\n    <Tab.Screen\n      name=\"ForecastScreen\"\n      component={ForecastScreen}\n      options={{ tabBarLabel: 'Forecast' }}\n    />\n  </Tab.Navigator>\n);\n","import { Picker } from '@react-native-picker/picker';\nimport { StackScreenProps } from '@react-navigation/stack';\nimport { nanoid } from '@reduxjs/toolkit';\nimport nullthrows from 'nullthrows';\nimport React, { useLayoutEffect, useState } from 'react';\nimport { Button, StyleSheet, TextInput, View } from 'react-native';\nimport { connect, useDispatch } from 'react-redux';\n\nimport StarRater from '../components/StarRater';\nimport { journalEntriesSlice } from '../data/journalEntriesReducer';\nimport { spotFavoritesSelectors } from '../data/spotFavoritesReducer';\nimport { RootState } from '../data/store';\nimport Surfline, { Forecast, Spot } from '../utils/Surfline';\nimport { RootStackParamList } from './RootStack';\n\ntype Props = StackScreenProps<RootStackParamList, 'NewJournalEntryScreen'> & {\n  spotFavorites: Spot[];\n};\n\nconst INVALID_SPOT_SENTINEL = 'invalid';\n\nconst NewJournalEntryScreen = ({ navigation, spotFavorites }: Props) => {\n  const dispatch = useDispatch();\n  const [body, setBody] = useState('');\n  const [starRating, setStarRating] = useState(0);\n  const [spotId, setSpotId] = useState(INVALID_SPOT_SENTINEL);\n\n  const onPressSubmit = async () => {\n    let spot: Spot;\n    let forecast: Forecast;\n    try {\n      const report = await Surfline.fetchReport(nullthrows(spotId));\n      forecast = report.forecast;\n      spot = nullthrows(spotFavorites.find((sf) => sf.id === spotId));\n    } catch (e) {\n      setSpotId(INVALID_SPOT_SENTINEL);\n      return;\n    }\n    dispatch(\n      journalEntriesSlice.actions.journalEntryAdded({\n        id: nanoid(),\n        body,\n        createdAt: new Date().toString(),\n        spot,\n        forecast,\n        rating: starRating,\n      })\n    );\n    navigation.pop();\n  };\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      // @ts-expect-error\n      headerLeft: null,\n      headerRight: () => <Button title=\"Cancel\" onPress={() => navigation.pop()} />,\n    });\n  }, [navigation]);\n\n  return (\n    <View style={styles.container}>\n      <TextInput\n        value={body}\n        keyboardType=\"default\"\n        onChangeText={(text) => setBody(text)}\n        placeholder=\"Note\"\n        style={styles.input}\n      />\n      <StarRater value={starRating} onChange={(value) => setStarRating(value)} />\n      <Picker\n        selectedValue={spotId}\n        style={{ height: 50, width: 100 }}\n        onValueChange={(itemValue) => setSpotId(itemValue as string)}>\n        <Picker.Item label=\"Select a Spot\" value={INVALID_SPOT_SENTINEL} />\n        {spotFavorites.map((spot) => (\n          <Picker.Item label={spot.name} value={spot.id} />\n        ))}\n      </Picker>\n      <Button\n        onPress={onPressSubmit}\n        disabled={starRating === 0 || !body || spotId === INVALID_SPOT_SENTINEL}\n        title=\"Save\"\n      />\n    </View>\n  );\n};\n\nexport default connect((state: RootState) => {\n  return {\n    spotFavorites: spotFavoritesSelectors.selectAll(state),\n  };\n})(NewJournalEntryScreen);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#fff',\n  },\n  input: {\n    padding: 4,\n    marginBottom: 20,\n    borderBottomColor: '#ddd',\n    borderBottomWidth: 1,\n  },\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport React from 'react';\n\nimport MainTabs from './MainTabs';\nimport NewJournalEntryScreen from './NewJournalEntryScreen';\n\nexport type RootStackParamList = {\n  MainTabs: undefined;\n  NewJournalEntryScreen: undefined;\n};\n\nconst RootStack = createStackNavigator<RootStackParamList>();\n\nexport default () => (\n  <RootStack.Navigator mode=\"modal\">\n    <RootStack.Screen name=\"MainTabs\" component={MainTabs} options={{ headerShown: false }} />\n    <RootStack.Screen\n      name=\"NewJournalEntryScreen\"\n      component={NewJournalEntryScreen}\n      options={{ title: 'Add Journal Entry' }}\n    />\n  </RootStack.Navigator>\n);\n","import { NavigationContainer } from '@react-navigation/native';\nimport { registerRootComponent } from 'expo';\nimport { StatusBar } from 'expo-status-bar';\nimport * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport { persistor, store } from './data/store';\nimport RootStack from './screens/RootStack';\n\nconst App = () => (\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <NavigationContainer>\n        <StatusBar style=\"auto\" />\n        <RootStack />\n      </NavigationContainer>\n    </PersistGate>\n  </Provider>\n);\n\nregisterRootComponent(App);\n"],"sourceRoot":""}
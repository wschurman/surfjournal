{"version":3,"sources":["src/data/journalEntriesReducer.ts","src/data/spotFavoritesReducer.ts","src/data/store.ts","src/helpers/makeHeaderLeftOptions.tsx","src/utils/Surfline.ts","src/utils/formatting.ts","src/components/ForecastSearchResult.tsx","src/screens/ForecastScreen.tsx","src/screens/ForecastStack.tsx","src/components/StarRater.tsx","src/screens/JournalEntryDetailsScreen.tsx","src/components/JournalEntryListItem.tsx","src/components/JournalEntryList.tsx","src/screens/JournalEntryListScreen.tsx","src/screens/JournalEntriesStack.tsx","src/screens/MainTabs.tsx","src/screens/NewJournalEntryScreen.tsx","src/screens/RootStack.tsx","src/App.tsx"],"names":["journalEntriesAdapter","createEntityAdapter","selectId","journalEntry","id","sortComparer","a","b","aDate","Date","createdAt","bDate","journalEntriesSlice","createSlice","name","initialState","getInitialState","reducers","journalEntryAdded","addOne","deleteJournalEntry","removeOne","journalEntriesSelectors","getSelectors","state","journalEntries","spotFavoritesAdapter","spot","spotFavoritesSlice","spotFavoriteAdded","removeSpotFavorite","spotFavoritesSelectors","spotFavorites","journalEntriesPersistConfig","key","version","storage","AsyncStorage","spotFavoritesPersistConfig","store","configureStore","reducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","stackNavigationActions","navigation","headerLeft","Ionicons","style","marginLeft","size","color","onPress","openDrawer","Surfline","path","fetch","headers","Accept","response","ok","error","Error","statusText","statusCode","status","json","params","Object","keys","filter","undefined","map","encodeURIComponent","join","input","this","baseFetch","result","hits","length","hit","_id","_source","permalink","href","swells","spotId","camera","cameras","forecast","report","cam","cameraStillUrl","stillUrl","cameraRewindClipUrl","rewindClip","rating","conditions","value","wind","speed","direction","weather","temperature","wave","minHeight","waveHeight","min","maxHeight","max","occasionalHeight","occasional","plusHeight","plus","human","humanRelation","tide","type","current","primarySwell","findPrimarySwell","body","formatRating","toLowerCase","formatWave","occString","plusString","formatTide","formatWind","formatPrimarySwell","swell","height","period","formatForecast","connect","selectAll","searchText","dispatch","useDispatch","useState","loading","setLoading","setResult","useFocusEffect","React","useCallback","isActive","async","searchSpots","fetchReport","ActivityIndicator","animating","Text","message","View","camURL","isAlreadyAFavorite","find","sf","ScrollView","styles","container","saveButton","Button","backgroundColor","actions","Image","camImage","source","uri","striptags","formatFullReport","StyleSheet","create","flex","marginBottom","width","setSearchText","resultSearchText","setResultSearchText","searchBar","keyboardType","onChangeText","text","placeholder","onSubmitEditing","Keyboard","dismiss","TouchableOpacity","searchButton","padding","flexDirection","flexGrow","borderBottomColor","borderBottomWidth","ForecastStack","createStackNavigator","Navigator","Screen","component","ForecastScreen","options","makeHeaderLeftOptions","title","Star","on","star","props","v","onChange","justifyContent","STAR_SIZE","marginEnd","date","fontSize","marginTop","deleteButton","selectById","route","setOptions","toLocaleString","StarRater","pop","Pressable","pressed","item","Separator","hairlineWidth","Empty","alignContent","alignItems","FlatList","data","renderItem","JournalEntryListItem","onPressJournalEntry","keyExtractor","ItemSeparatorComponent","ListEmptyComponent","useLayoutEffect","headerRight","navigate","JournalEntryList","push","MainStack","JournalEntryListScreen","JournalEntryDetailsScreen","Tab","createBottomTabNavigator","Drawer","createDrawerNavigator","Platform","OS","initialRouteName","JournalEntriesStack","tabBarLabel","tabBarIcon","focused","drawerLabel","setBody","starRating","setStarRating","setSpotId","TextInput","selectedValue","onValueChange","itemValue","Item","label","nullthrows","nanoid","toString","disabled","RootStack","mode","MainTabs","headerShown","NewJournalEntryScreen","registerRootComponent","NavigationContainer","StatusBar"],"mappings":"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","file":"static/js/app.2ea82c16.chunk.js","sourcesContent":["import { createEntityAdapter, createSlice } from '@reduxjs/toolkit';\n\nimport { Forecast, Spot } from '../utils/Surfline';\nimport { RootState } from './store';\n\nexport interface JournalEntry {\n  id: string;\n  createdAt: string;\n  body: string;\n  spot: Spot;\n  forecast: Forecast;\n  rating: number;\n}\n\nexport const journalEntriesAdapter = createEntityAdapter<JournalEntry>({\n  selectId: (journalEntry) => journalEntry.id,\n  sortComparer: (a, b) => {\n    const aDate = new Date(a.createdAt);\n    const bDate = new Date(b.createdAt);\n    return aDate < bDate ? -1 : bDate < aDate ? 1 : 0;\n  },\n});\n\nexport const journalEntriesSlice = createSlice({\n  name: 'journalEntries',\n  initialState: journalEntriesAdapter.getInitialState(),\n  reducers: {\n    journalEntryAdded: journalEntriesAdapter.addOne,\n    deleteJournalEntry: journalEntriesAdapter.removeOne,\n  },\n});\n\nexport const journalEntriesSelectors = journalEntriesAdapter.getSelectors<RootState>(\n  (state) => state.journalEntries\n);\n","import { createEntityAdapter, createSlice } from '@reduxjs/toolkit';\n\nimport { Spot } from '../utils/Surfline';\nimport { RootState } from './store';\n\nexport const spotFavoritesAdapter = createEntityAdapter<Spot>({\n  selectId: (spot) => spot.id,\n  sortComparer: (a, b) => {\n    return a.name < b.name ? -1 : b.name < a.name ? 1 : 0;\n  },\n});\n\nexport const spotFavoritesSlice = createSlice({\n  name: 'spotFavorites',\n  initialState: spotFavoritesAdapter.getInitialState(),\n  reducers: {\n    spotFavoriteAdded: spotFavoritesAdapter.addOne,\n    removeSpotFavorite: spotFavoritesAdapter.removeOne,\n  },\n});\n\nexport const spotFavoritesSelectors = spotFavoritesAdapter.getSelectors<RootState>(\n  (state) => state.spotFavorites\n);\n","import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n  persistStore,\n} from 'redux-persist';\n\nimport { journalEntriesSlice } from './journalEntriesReducer';\nimport { spotFavoritesSlice } from './spotFavoritesReducer';\n\nconst journalEntriesPersistConfig = {\n  key: 'journal_entries',\n  version: 1,\n  storage: AsyncStorage,\n};\n\nconst spotFavoritesPersistConfig = {\n  key: 'spot_favorites',\n  version: 1,\n  storage: AsyncStorage,\n};\n\nexport const store = configureStore({\n  reducer: {\n    journalEntries: persistReducer(journalEntriesPersistConfig, journalEntriesSlice.reducer),\n    spotFavorites: persistReducer(spotFavoritesPersistConfig, spotFavoritesSlice.reducer),\n  },\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n});\n\nexport const persistor = persistStore(store);\n\nexport type RootState = ReturnType<typeof store.getState>;\n","import { Ionicons } from '@expo/vector-icons';\nimport { StackNavigationOptions } from '@react-navigation/stack';\nimport React from 'react';\n\nexport default function (\n  stackNavigationActions: StackNavigationOptions\n): ({ navigation }: { navigation: any }) => StackNavigationOptions {\n  return ({ navigation }) => ({\n    ...stackNavigationActions,\n    headerLeft: () => (\n      <Ionicons\n        style={{ marginLeft: 10 }}\n        name=\"md-menu\"\n        size={32}\n        color=\"#222\"\n        onPress={() => navigation.openDrawer()}\n      />\n    ),\n  });\n}\n","const BASE_URL = 'https://services.surfline.com';\n\nexport interface Spot {\n  id: string;\n  name: string;\n  permalink: string;\n}\n\nexport interface Wave {\n  minHeight: number;\n  maxHeight: number;\n  occasionalHeight?: number;\n  plusHeight: boolean;\n  human: string;\n}\n\nexport interface Wind {\n  speed: number;\n  direction: number;\n}\n\nexport interface Tide {\n  type: string;\n}\n\nexport interface Swell {\n  height: number;\n  direction: number;\n  period: number;\n}\n\nexport interface Forecast {\n  rating?: string;\n  wind: Wind;\n  weather: {\n    temperature: number;\n  };\n  wave: Wave;\n  tide: Tide;\n  primarySwell: Swell;\n}\n\nexport interface Report {\n  cam: {\n    cameraStillUrl?: string;\n    cameraRewindClipUrl?: string;\n  };\n  forecast: Forecast;\n  report: {\n    body?: string;\n  };\n}\n\nexport default class Surfline {\n  private static async baseFetch<T>(path: string): Promise<T> {\n    const response = await fetch(`${BASE_URL}${path}`, {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n    if (!response.ok) {\n      const error = new Error(response.statusText);\n      (error as any).response = response;\n      (error as any).statusCode = response.status;\n      throw error;\n    }\n\n    return await response.json();\n  }\n\n  private static createParamString(params: { [key: string]: any }): string {\n    return Object.keys(params)\n      .filter((key) => params[key] !== undefined && params[key] !== null)\n      .map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n      .join('&');\n  }\n\n  public static async searchSpots(input: string): Promise<Spot | null> {\n    const result = await this.baseFetch<any[]>(\n      `/search/site?q=${input}&querySize=1&suggestionSize=1`\n    );\n\n    const hits = result[0].hits.hits;\n    if (!hits.length) {\n      return null;\n    }\n\n    const hit = hits[0];\n\n    return {\n      id: hit._id,\n      name: hit._source.name,\n      permalink: hit._source.href,\n    };\n  }\n\n  private static findPrimarySwell(swells: any[]): Swell {\n    return swells[0];\n  }\n\n  public static async fetchReport(spotId: string): Promise<Report> {\n    const result = await this.baseFetch<any>(`/kbyg/spots/reports?spotId=${spotId}`);\n    const camera = result.spot.cameras[0];\n    const forecast = result.forecast;\n    const report = result.report;\n    return {\n      cam: {\n        cameraStillUrl: camera?.stillUrl,\n        cameraRewindClipUrl: camera?.rewindClip,\n      },\n      forecast: {\n        rating: forecast.conditions.value,\n        wind: {\n          speed: forecast.wind.speed,\n          direction: forecast.wind.direction,\n        },\n        weather: {\n          temperature: forecast.weather.temperature,\n        },\n        wave: {\n          minHeight: forecast.waveHeight.min,\n          maxHeight: forecast.waveHeight.max,\n          occasionalHeight: forecast.waveHeight.occasional,\n          plusHeight: forecast.waveHeight.plus,\n          human: forecast.waveHeight.humanRelation,\n        },\n        tide: {\n          type: forecast.tide.current.type,\n        },\n        primarySwell: Surfline.findPrimarySwell(forecast.swells),\n      },\n      report: {\n        body: report?.body,\n      },\n    };\n  }\n}\n","import striptags from 'striptags';\n\nimport { Forecast, Report, Swell, Wave, Wind } from './Surfline';\n\nfunction formatRating(rating?: string): string | null {\n  return rating ? rating.toLowerCase() : null;\n}\n\nfunction formatWave(wave: Wave): string {\n  const occString = wave.occasionalHeight ? ` occ. ${wave.occasionalHeight}` : '';\n  const plusString = wave.plusHeight ? `+` : '';\n  return `${wave.minHeight}-${wave.maxHeight}ft${occString}${plusString}`;\n}\n\nfunction formatTide(tide: { type: string }): string {\n  return `Tide: ${tide.type.toLowerCase()}`;\n}\n\nfunction formatWind(wind: Wind): string {\n  return `Wind: ${wind.speed}kts, ${wind.direction}°`;\n}\n\nfunction formatPrimarySwell(swell: Swell): string {\n  return `Primary Swell: ${swell.height}ft at ${swell.period}s ${swell.direction}`;\n}\n\nexport function formatForecast(forecast: Forecast): string {\n  const { wave, wind, rating, tide, primarySwell } = forecast;\n  return [\n    formatRating(rating),\n    formatWave(wave),\n    formatTide(tide),\n    formatWind(wind),\n    formatPrimarySwell(primarySwell),\n  ]\n    .filter((a) => a)\n    .join('\\n');\n}\n\nexport function formatReport(report: Report): string {\n  return formatForecast(report.forecast);\n}\n\nexport function formatFullReport(report: Report): string {\n  const { wave, wind, rating, tide, primarySwell } = report.forecast;\n  return [\n    formatRating(rating),\n    formatWave(wave),\n    formatTide(tide),\n    formatWind(wind),\n    formatPrimarySwell(primarySwell),\n    '',\n    report.report.body ? striptags(report.report.body) : '',\n  ]\n    .filter((a) => a !== null)\n    .join('\\n');\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport { useFocusEffect } from '@react-navigation/native';\nimport React, { useState } from 'react';\nimport { Image, Text, View, StyleSheet, ActivityIndicator, ScrollView } from 'react-native';\nimport { connect, useDispatch } from 'react-redux';\n\nimport { spotFavoritesSelectors, spotFavoritesSlice } from '../data/spotFavoritesReducer';\nimport { RootState } from '../data/store';\nimport Surfline, { Report, Spot } from '../utils/Surfline';\nimport { formatFullReport } from '../utils/formatting';\n\nconst ForecastSearchResult = ({\n  searchText,\n  spotFavorites,\n}: {\n  searchText: string;\n  spotFavorites: Spot[];\n}) => {\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(true);\n  const [result, setResult] = useState<{ report: Report; spot: Spot } | Error | null>(null);\n\n  useFocusEffect(\n    React.useCallback(() => {\n      let isActive = true;\n\n      const fetchReport = async () => {\n        setLoading(true);\n        try {\n          const spot = await Surfline.searchSpots(searchText);\n          if (spot) {\n            const report = await Surfline.fetchReport(spot.id);\n            if (isActive) {\n              setResult({ report, spot });\n            }\n          }\n        } catch (e) {\n          if (isActive) {\n            setResult(e);\n          }\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      fetchReport();\n\n      return () => {\n        isActive = false;\n      };\n    }, [searchText])\n  );\n\n  if (loading) {\n    return <ActivityIndicator size=\"large\" animating />;\n  }\n\n  if (result instanceof Error) {\n    return <Text>Error: {result.message}</Text>;\n  }\n\n  if (!result) {\n    return <View />;\n  }\n\n  const camURL = result.report?.cam.cameraStillUrl;\n\n  const isAlreadyAFavorite = spotFavorites.find((sf) => sf.id === result.spot.id);\n\n  const onPressSave = () => {\n    if (isAlreadyAFavorite) {\n      dispatch(spotFavoritesSlice.actions.removeSpotFavorite(result.spot.id));\n    } else {\n      dispatch(spotFavoritesSlice.actions.spotFavoriteAdded(result.spot));\n    }\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.saveButton}>\n        <Ionicons.Button\n          name={isAlreadyAFavorite ? 'star' : 'star-outline'}\n          /* @ts-expect-error */\n          backgroundColor={isAlreadyAFavorite ? 'green' : 'gold'}\n          onPress={onPressSave}>\n          {isAlreadyAFavorite ? 'Unfavorite' : 'Favorite'}\n        </Ionicons.Button>\n      </View>\n\n      {camURL ? (\n        <Image\n          style={styles.camImage}\n          source={{\n            uri: camURL,\n          }}\n        />\n      ) : null}\n      <Text>{result.spot.name}</Text>\n      <Text>{formatFullReport(result.report)}</Text>\n    </ScrollView>\n  );\n};\n\nexport default connect((state: RootState) => {\n  return {\n    spotFavorites: spotFavoritesSelectors.selectAll(state),\n  };\n})(ForecastSearchResult);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  saveButton: {\n    marginBottom: 30,\n  },\n  camImage: {\n    width: 150,\n    height: 150,\n    marginBottom: 30,\n  },\n});\n","import { Ionicons } from '@expo/vector-icons';\nimport React, { useState } from 'react';\nimport { Keyboard, StyleSheet, TouchableOpacity, View } from 'react-native';\nimport { TextInput } from 'react-native-gesture-handler';\n\nimport ForecastSearchResult from '../components/ForecastSearchResult';\n\nexport default () => {\n  const [searchText, setSearchText] = useState('');\n  const [resultSearchText, setResultSearchText] = useState('');\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.searchBar}>\n        <TextInput\n          value={searchText}\n          keyboardType=\"default\"\n          onChangeText={(text) => setSearchText(text)}\n          placeholder=\"Search for a Spot\"\n          style={styles.input}\n          onSubmitEditing={() => {\n            Keyboard.dismiss();\n            setResultSearchText(searchText);\n          }}\n        />\n        <TouchableOpacity\n          onPress={() => {\n            Keyboard.dismiss();\n            setResultSearchText(searchText);\n          }}\n          style={styles.searchButton}>\n          <Ionicons name=\"search-circle\" color=\"blue\" size={30} />\n        </TouchableOpacity>\n      </View>\n      <ForecastSearchResult searchText={resultSearchText} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    padding: 10,\n  },\n  searchBar: {\n    flexDirection: 'row',\n  },\n  searchButton: {\n    flexGrow: 0,\n  },\n  input: {\n    flexGrow: 1,\n    padding: 4,\n    marginBottom: 20,\n    borderBottomColor: '#ddd',\n    borderBottomWidth: 1,\n  },\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport React from 'react';\n\nimport makeHeaderLeftOptions from '../helpers/makeHeaderLeftOptions';\nimport ForecastScreen from './ForecastScreen';\n\nexport type ForecastStackParamList = {\n  ForecastScreen: undefined;\n};\n\nconst ForecastStack = createStackNavigator<ForecastStackParamList>();\n\nexport default () => (\n  <ForecastStack.Navigator>\n    <ForecastStack.Screen\n      name=\"ForecastScreen\"\n      component={ForecastScreen}\n      options={makeHeaderLeftOptions({\n        title: 'Forecast',\n      })}\n    />\n  </ForecastStack.Navigator>\n);\n","import { Ionicons } from '@expo/vector-icons';\nimport React from 'react';\nimport { StyleSheet, View } from 'react-native';\n\ntype Props = {\n  value: number;\n  onChange: (value: number) => void;\n};\n\nconst Star = ({ on, onPress }: { on: boolean; onPress: () => void }) => {\n  return (\n    <Ionicons.Button\n      name={on ? 'star' : 'star-outline'}\n      // @ts-expect-error\n      backgroundColor=\"white\"\n      style={styles.star}\n      color=\"gold\"\n      onPress={onPress}\n    />\n  );\n};\n\nexport default (props: Props) => {\n  return (\n    <View style={styles.container}>\n      {[1, 2, 3, 4, 5].map((v) => (\n        <Star key={`star-${v}`} on={props.value >= v} onPress={() => props.onChange(v)} />\n      ))}\n    </View>\n  );\n};\n\nconst STAR_SIZE = 30;\nconst STARGIN = 5;\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    width: STAR_SIZE * 5 + STARGIN * 5,\n  },\n  star: {\n    width: STAR_SIZE,\n    height: STAR_SIZE,\n    marginEnd: STARGIN,\n    padding: 0,\n  },\n});\n","import { Ionicons } from '@expo/vector-icons';\nimport { CompositeNavigationProp } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { connect, useDispatch } from 'react-redux';\n\nimport StarRater from '../components/StarRater';\nimport {\n  journalEntriesSelectors,\n  journalEntriesSlice,\n  JournalEntry,\n} from '../data/journalEntriesReducer';\nimport { RootState } from '../data/store';\nimport { formatForecast } from '../utils/formatting';\nimport { HomeStackParamList } from './JournalEntriesStack';\nimport { RootStackParamList } from './RootStack';\n\ntype DetailsScreenNavigationProp = CompositeNavigationProp<\n  StackNavigationProp<HomeStackParamList, 'JournalEntryDetailsScreen'>,\n  CompositeNavigationProp<\n    StackNavigationProp<HomeStackParamList>,\n    StackNavigationProp<RootStackParamList>\n  >\n>;\n\nconst Details = ({\n  navigation,\n  journalEntry,\n}: {\n  navigation: DetailsScreenNavigationProp;\n  journalEntry: JournalEntry | undefined;\n}) => {\n  const dispatch = useDispatch();\n\n  React.useLayoutEffect(() => {\n    navigation.setOptions({\n      title: journalEntry ? journalEntry.spot.name : 'Not Found',\n    });\n  }, [navigation]);\n\n  if (!journalEntry) {\n    return (\n      <View style={styles.container}>\n        <Text>Not Found</Text>\n      </View>\n    );\n  }\n\n  const onPressDelete = async () => {\n    dispatch(journalEntriesSlice.actions.deleteJournalEntry(journalEntry.id));\n    navigation.pop();\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.date}>{new Date(journalEntry.createdAt).toLocaleString()}</Text>\n      <Text style={styles.body}>{journalEntry.body}</Text>\n      <Text style={styles.body}>{formatForecast(journalEntry.forecast)}</Text>\n      <StarRater value={journalEntry.rating} onChange={() => {}} />\n      <View style={styles.deleteButton}>\n        {/* @ts-expect-error */}\n        <Ionicons.Button name=\"trash-bin\" backgroundColor=\"red\" onPress={onPressDelete}>\n          Delete\n        </Ionicons.Button>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#fff',\n  },\n  date: {\n    fontSize: 14,\n    marginTop: 10,\n  },\n  body: {\n    marginTop: 10,\n    fontSize: 16,\n  },\n  deleteButton: {\n    marginTop: 40,\n  },\n});\n\nexport default connect((state: RootState, props: { route: { params: { id: string } } }) => {\n  return {\n    journalEntry: journalEntriesSelectors.selectById(state, props.route.params.id),\n  };\n})(Details);\n","import * as React from 'react';\nimport { Text, StyleSheet, Pressable } from 'react-native';\n\nimport { JournalEntry } from '../data/journalEntriesReducer';\n\ntype Props = {\n  journalEntry: JournalEntry;\n  onPress: (journalEntry: JournalEntry) => void;\n};\n\nexport default (props: Props) => {\n  return (\n    <Pressable\n      onPress={() => props.onPress(props.journalEntry)}\n      style={({ pressed }) => [{ backgroundColor: pressed ? '#eee' : '#fff' }, styles.item]}>\n      <Text style={styles.title}>{props.journalEntry.spot.name}</Text>\n      <Text style={styles.date}>{new Date(props.journalEntry.createdAt).toLocaleString()}</Text>\n    </Pressable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  item: {\n    padding: 20,\n  },\n  title: {\n    fontSize: 16,\n  },\n  date: {\n    marginTop: 8,\n    color: '#666',\n    fontSize: 14,\n  },\n});\n","import * as React from 'react';\nimport { FlatList, StyleSheet, Text, View } from 'react-native';\n\nimport { JournalEntry } from '../data/journalEntriesReducer';\nimport JournalEntryListItem from './JournalEntryListItem';\n\ntype Props = {\n  journalEntries: JournalEntry[];\n  onPressJournalEntry: (journalEntry: JournalEntry) => void;\n};\n\nconst Separator = () => <View style={{ height: StyleSheet.hairlineWidth }} />;\n\nconst Empty = () => (\n  <View style={{ flex: 1, alignContent: 'center', alignItems: 'center' }}>\n    <Text style={{ marginTop: 30, fontSize: 20 }}>No Journal Entries</Text>\n  </View>\n);\n\nexport default (props: Props) => {\n  const renderItem = ({ item }: { item: JournalEntry }) => (\n    <JournalEntryListItem journalEntry={item} onPress={props.onPressJournalEntry} />\n  );\n\n  return (\n    <FlatList\n      data={props.journalEntries}\n      renderItem={renderItem}\n      keyExtractor={(item) => item.id}\n      ItemSeparatorComponent={Separator}\n      ListEmptyComponent={Empty}\n    />\n  );\n};\n","import { Ionicons } from '@expo/vector-icons';\nimport { CompositeNavigationProp } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport React, { useLayoutEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport JournalEntryList from '../components/JournalEntryList';\nimport { journalEntriesSelectors, JournalEntry } from '../data/journalEntriesReducer';\nimport { RootState } from '../data/store';\nimport { HomeStackParamList } from './JournalEntriesStack';\nimport { RootStackParamList } from './RootStack';\n\ntype HomeScreenNavigationProp = CompositeNavigationProp<\n  StackNavigationProp<HomeStackParamList, 'JournalEntryListScreen'>,\n  CompositeNavigationProp<\n    StackNavigationProp<HomeStackParamList>,\n    StackNavigationProp<RootStackParamList>\n  >\n>;\n\nconst Home = ({\n  navigation,\n  journalEntries,\n}: {\n  navigation: HomeScreenNavigationProp;\n  journalEntries: JournalEntry[];\n}) => {\n  const onPressJournalEntry = (journalEntry: JournalEntry) => {\n    navigation.push('JournalEntryDetailsScreen', { id: journalEntry.id });\n  };\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: () => (\n        <Ionicons.Button\n          onPress={() => navigation.navigate('NewJournalEntryScreen')}\n          // @ts-expect-error\n          backgroundColor=\"white\"\n          name=\"add\"\n          color=\"blue\"\n          size={30}\n        />\n      ),\n    });\n  }, [navigation]);\n\n  return (\n    <JournalEntryList journalEntries={journalEntries} onPressJournalEntry={onPressJournalEntry} />\n  );\n};\n\nexport default connect((state: RootState) => ({\n  journalEntries: journalEntriesSelectors.selectAll(state),\n}))(Home);\n","import { createStackNavigator } from '@react-navigation/stack';\nimport React from 'react';\n\nimport makeHeaderLeftOptions from '../helpers/makeHeaderLeftOptions';\nimport JournalEntryDetailsScreen from './JournalEntryDetailsScreen';\nimport JournalEntryListScreen from './JournalEntryListScreen';\n\nexport type HomeStackParamList = {\n  JournalEntryListScreen: undefined;\n  JournalEntryDetailsScreen: { id: string };\n};\n\nconst MainStack = createStackNavigator<HomeStackParamList>();\n\nexport default () => (\n  <MainStack.Navigator>\n    <MainStack.Screen\n      name=\"JournalEntryListScreen\"\n      component={JournalEntryListScreen}\n      options={makeHeaderLeftOptions({\n        title: 'Surf Journal',\n      })}\n    />\n    <MainStack.Screen name=\"JournalEntryDetailsScreen\" component={JournalEntryDetailsScreen} />\n  </MainStack.Navigator>\n);\n","import { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport React from 'react';\nimport { Platform } from 'react-native';\n\nimport ForecastStack from './ForecastStack';\nimport JournalEntriesStack from './JournalEntriesStack';\n\nexport type MainTabsParamList = {\n  JournalEntriesStack: undefined;\n  ForecastStack: undefined;\n};\n\nconst Tab = createBottomTabNavigator<MainTabsParamList>();\nconst Drawer = createDrawerNavigator<MainTabsParamList>();\n\nconst MainTabs = () => (\n  <Tab.Navigator initialRouteName=\"JournalEntriesStack\">\n    <Tab.Screen\n      name=\"JournalEntriesStack\"\n      component={JournalEntriesStack}\n      options={{\n        tabBarLabel: 'Journal',\n        tabBarIcon: ({ focused, size, color }) => (\n          <Ionicons name={focused ? 'journal' : 'journal-outline'} size={size} color={color} />\n        ),\n      }}\n    />\n    <Tab.Screen\n      name=\"ForecastStack\"\n      component={ForecastStack}\n      options={{\n        tabBarLabel: 'Forecast',\n        tabBarIcon: ({ focused, size, color }) => (\n          <Ionicons name={focused ? 'rainy' : 'rainy-outline'} size={size} color={color} />\n        ),\n      }}\n    />\n  </Tab.Navigator>\n);\n\nconst MainDrawer = () => (\n  <Drawer.Navigator initialRouteName=\"JournalEntriesStack\">\n    <Drawer.Screen\n      name=\"JournalEntriesStack\"\n      component={JournalEntriesStack}\n      options={{\n        drawerLabel: 'Journal',\n      }}\n    />\n    <Drawer.Screen\n      name=\"ForecastStack\"\n      component={ForecastStack}\n      options={{\n        drawerLabel: 'Forecast',\n      }}\n    />\n  </Drawer.Navigator>\n);\n\nexport default Platform.OS === 'ios' ? MainTabs : MainDrawer;\n","import { Picker } from '@react-native-picker/picker';\nimport { StackScreenProps } from '@react-navigation/stack';\nimport { nanoid } from '@reduxjs/toolkit';\nimport nullthrows from 'nullthrows';\nimport React, { useLayoutEffect, useState } from 'react';\nimport { Button, StyleSheet, TextInput, View } from 'react-native';\nimport { connect, useDispatch } from 'react-redux';\n\nimport StarRater from '../components/StarRater';\nimport { journalEntriesSlice } from '../data/journalEntriesReducer';\nimport { spotFavoritesSelectors } from '../data/spotFavoritesReducer';\nimport { RootState } from '../data/store';\nimport Surfline, { Forecast, Spot } from '../utils/Surfline';\nimport { RootStackParamList } from './RootStack';\n\ntype Props = StackScreenProps<RootStackParamList, 'NewJournalEntryScreen'> & {\n  spotFavorites: Spot[];\n};\n\nconst INVALID_SPOT_SENTINEL = 'invalid';\n\nconst NewJournalEntryScreen = ({ navigation, spotFavorites }: Props) => {\n  const dispatch = useDispatch();\n  const [body, setBody] = useState('');\n  const [starRating, setStarRating] = useState(0);\n  const [spotId, setSpotId] = useState(INVALID_SPOT_SENTINEL);\n\n  const onPressSubmit = async () => {\n    let spot: Spot;\n    let forecast: Forecast;\n    try {\n      const report = await Surfline.fetchReport(nullthrows(spotId));\n      forecast = report.forecast;\n      spot = nullthrows(spotFavorites.find((sf) => sf.id === spotId));\n    } catch (e) {\n      setSpotId(INVALID_SPOT_SENTINEL);\n      return;\n    }\n    dispatch(\n      journalEntriesSlice.actions.journalEntryAdded({\n        id: nanoid(),\n        body,\n        createdAt: new Date().toString(),\n        spot,\n        forecast,\n        rating: starRating,\n      })\n    );\n    navigation.pop();\n  };\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      // @ts-expect-error\n      headerLeft: null,\n      headerRight: () => <Button title=\"Cancel\" onPress={() => navigation.pop()} />,\n    });\n  }, [navigation]);\n\n  return (\n    <View style={styles.container}>\n      <TextInput\n        value={body}\n        keyboardType=\"default\"\n        onChangeText={(text) => setBody(text)}\n        placeholder=\"Note\"\n        style={styles.input}\n      />\n      <StarRater value={starRating} onChange={(value) => setStarRating(value)} />\n      <Picker\n        selectedValue={spotId}\n        style={{ height: 50, width: 100 }}\n        onValueChange={(itemValue) => setSpotId(itemValue as string)}>\n        <Picker.Item label=\"Select a Spot\" value={INVALID_SPOT_SENTINEL} />\n        {spotFavorites.map((spot) => (\n          <Picker.Item label={spot.name} value={spot.id} />\n        ))}\n      </Picker>\n      <Button\n        onPress={onPressSubmit}\n        disabled={starRating === 0 || !body || spotId === INVALID_SPOT_SENTINEL}\n        title=\"Save\"\n      />\n    </View>\n  );\n};\n\nexport default connect((state: RootState) => {\n  return {\n    spotFavorites: spotFavoritesSelectors.selectAll(state),\n  };\n})(NewJournalEntryScreen);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#fff',\n  },\n  input: {\n    padding: 4,\n    marginBottom: 20,\n    borderBottomColor: '#ddd',\n    borderBottomWidth: 1,\n  },\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport React from 'react';\n\nimport MainTabs from './MainTabs';\nimport NewJournalEntryScreen from './NewJournalEntryScreen';\n\nexport type RootStackParamList = {\n  MainTabs: undefined;\n  NewJournalEntryScreen: undefined;\n};\n\nconst RootStack = createStackNavigator<RootStackParamList>();\n\nexport default () => (\n  <RootStack.Navigator mode=\"modal\">\n    <RootStack.Screen name=\"MainTabs\" component={MainTabs} options={{ headerShown: false }} />\n    <RootStack.Screen\n      name=\"NewJournalEntryScreen\"\n      component={NewJournalEntryScreen}\n      options={{ title: 'Add Journal Entry' }}\n    />\n  </RootStack.Navigator>\n);\n","import { NavigationContainer } from '@react-navigation/native';\nimport { registerRootComponent } from 'expo';\nimport { StatusBar } from 'expo-status-bar';\nimport * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport { persistor, store } from './data/store';\nimport RootStack from './screens/RootStack';\n\nconst App = () => (\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <NavigationContainer>\n        <StatusBar style=\"auto\" />\n        <RootStack />\n      </NavigationContainer>\n    </PersistGate>\n  </Provider>\n);\n\nregisterRootComponent(App);\n"],"sourceRoot":""}